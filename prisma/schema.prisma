generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextIndex","fullTextSearch"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//--------------------------------------------------
// COMMON TYPE
//--------------------------------------------------
type changeContent {
  content String
  date    DateTime 
}

type ingredients {
  amount       String
  en           String?
  ko           String
  pharmacopoeia String
  standard     String
  unit         String
}

type compound {
  code String
  name String
}

type reExamination {
  re_examination_end_date   DateTime?
  re_examination_start_date DateTime?
  type                      String
}
type pharmacologicalClass {
  code String
  name String
}

model medicine {
  id                  String   @id @map("_id")
  additive_ingredients     compound[]
  atc_code            String?
  cancel_date         DateTime?
  cancel_status       String
  caution             String?
  caution_file_url    String?
  change_content      changeContent[]
  
  change_date         DateTime?
  classification      String?
  company             String
  company_number      String?
  document_file_url   String?
  effect              String?
  effect_file_url     String?
  english_company     String?
  english_name        String?
  expiration_date     String?
  ingredients         ingredients[]
  insurance_code      String[] 
  is_new_drug         Boolean
  main_ingredients     compound[]
  name                String 
  narcotic_type       String?
  packing_unit        String
  permit_date         DateTime?
  raw_material        String
  re_examination      reExamination[]
  register_id         String
  serial_number       String
  standard_code       String[]
  state               String?
  storage_method      String
  total_amount        String?
  type                String
  usage               String?
  usage_file_url      String?
  document String?

  insert_file_url    String? 
  consignment_manufacture String? 


  industry_type    String? //COMMON //업종
  image_url           String? //COMMON //이미지
  pharmacological_class    pharmacologicalClass[] //COMMON //약효분류명
  ingredients_count Int? //COMMON //성분수 
  company_serial_number String? //COMMON //업체일련번호

  @@index([main_ingredients])
  @@index([main_ingredients.code])
  @@index([additive_ingredients])
  @@index([additive_ingredients.code])
  @@index([insurance_code])
  @@index([english_name])
  @@fulltext([name])
}



model dur_ingredient_combined_taboo{
  id String @id @map("_id") /// [dur_code]_[contraindication_dur_code]
  dur_code String  
  dur_type String // 병용금기
  mix_type String // 단일/복합
  ingredient_eng_name String
  ingredient_kor_name String
  mix String?
  related_ingredients compound[]
  pharmacological_class pharmacologicalClass[]
  contraindication_mix_type String
  contraindication_dur_code String
  contraindication_eng_name String
  contraindication_kor_name String
  contraindication_mix String?
  contraindication_related_ingredients compound[]
  contraindication_pharmacological_class pharmacologicalClass[]
  notification_date DateTime?
  prohibited_content String
  remarks String?
  deletion_status String

  @@index([dur_code]) 
  @@index([related_ingredients])
  @@index([related_ingredients.code])
  @@index([related_ingredients.name])
  @@index([related_ingredients.name, related_ingredients.code])
  @@index([contraindication_related_ingredients])
  @@index([contraindication_related_ingredients.code])
  @@index([contraindication_related_ingredients.name])
  @@index([contraindication_related_ingredients.name, contraindication_related_ingredients.code])
}

model dur_ingredient_age_taboo{
  id String @id @map("_id") /// [dur_code]
  dur_type String // 연령금기
  mix_type String // 단일/복합
  dur_code String
  ingredient_eng_name String
  ingredient_kor_name String
  mix String?
  related_ingredients compound[]
  pharmacological_class pharmacologicalClass[]
  forms String[]
  age String
  base String // 이하,미만 등...
  notification_date DateTime?
  prohibited_content String
  remarks String?
  deletion_status String

  @@index([dur_code])
  @@index([related_ingredients])
  @@index([related_ingredients.code])
  @@index([forms])
}

model dur_ingredient_pregnant_taboo{
  id String @id @map("_id") /// [dur_code]
  dur_type String // 임부금기
  mix_type String // 단일/복합
  dur_code String
  ingredient_eng_name String
  ingredient_kor_name String
  mix String?
  related_ingredients compound[]
  pharmacological_class pharmacologicalClass[]
  forms String[]
  grade String
  notification_date DateTime?
  prohibited_content String
  remarks String?
  deletion_status String

  @@index([dur_code])
  @@index([related_ingredients])
  @@index([related_ingredients.code])
  @@index([forms])
  @@index([grade])
}

model dur_ingredient_volume_taboo{
  id String @id @map("_id") /// [dur_code]
  dur_type String // 임부금기
  mix_type String // 단일/복합
  dur_code String
  ingredient_eng_name String
  ingredient_kor_name String
  mix String?
  related_ingredients compound[]
  pharmacological_class pharmacologicalClass[]
  forms String[]
  max_quantity String
  notification_date DateTime?
  prohibited_content String
  remarks String?
  deletion_status String

  @@index([dur_code])
  @@index([related_ingredients])
  @@index([related_ingredients.code])
  @@index([forms])
}
model dur_ingredient_period_taboo{
  id String @id @map("_id") /// [dur_code]
  dur_type String // 임부금기
  mix_type String // 단일/복합
  dur_code String
  ingredient_eng_name String
  ingredient_kor_name String
  mix String?
  related_ingredients compound[]
  pharmacological_class pharmacologicalClass[]
  forms String[]
  max_period String
  notification_date DateTime?
  prohibited_content String
  remarks String?
  deletion_status String

  @@index([dur_code])
  @@index([related_ingredients])
  @@index([related_ingredients.code])
  @@index([forms])
}
model dur_ingredient_old_taboo{
  id String @id @map("_id") /// [dur_code]
  dur_type String // 임부금기
  mix_type String // 단일/복합
  dur_code String
  ingredient_eng_name String
  ingredient_kor_name String
  mix String?
  related_ingredients compound[]
  pharmacological_class pharmacologicalClass[]
  forms String[]
  notification_date DateTime?
  prohibited_content String
  remarks String?
  deletion_status String

  @@index([dur_code])
  @@index([related_ingredients])
  @@index([related_ingredients.code])
  @@index([forms])
}
model dur_ingredient_duplicate_effect_taboo{
  id String @id @map("_id") /// [dur_code]
  dur_type String // 임부금기
  mix_type String // 단일/복합
  dur_code String
  ingredient_eng_name String
  ingredient_kor_name String
  mix String?
  related_ingredients compound[]
  pharmacological_class pharmacologicalClass[]
  notification_date DateTime?
  prohibited_content String
  remarks String?
  deletion_status String
  effect_code String
  category String?
  @@index([dur_code])
  @@index([related_ingredients])
  @@index([related_ingredients.code])
  @@index([effect_code])
  @@index([category])
}


model medicine_insurance {
    insurance_code String @id @map("_id")
    name String
    main_ingredient_code String
    type String
    company String
    standard String
    unit String
    max_price String
    is_special String
    note String?
    list_code String?
    administration String

    @@index([main_ingredient_code])
}

model medicine_identification {
  id String @id @map("_id")
  serial_number String
  name String
  company_name String
  company_serial_number String
  state String
  image_url String
  print_front String?
  print_back String?
  drug_shape String?
  color_front String
  color_back String?
  line_front String?
  line_back String?
  length_long String?
  length_short String?
  thick String?
  image_created_date DateTime?
  classification_number String?
  classification_name String[]
  professional_general_classification String
  item_approval_date DateTime?
  form_code_name String[]
  mark_code_front_content String?
  mark_code_back_content String?
  mark_code_front_image_url String?
  mark_code_back_image_url String?
  item_english_name String?
  change_date DateTime?
  mark_code_front String?
  mark_code_back String?
  insurance_code String?
  company_number String?
  @@index([serial_number])
  @@index([name])
  @@index([company_name])
  @@index([company_serial_number])
  @@index([state])
  @@index([drug_shape])
  @@index([classification_number])
  @@index([classification_name])
  @@index([professional_general_classification])
  @@index([item_approval_date])
  @@index([form_code_name])
  @@index([mark_code_front_content])
  @@index([mark_code_back_content])
  @@index([item_english_name])
  @@index([mark_code_front])
  @@index([mark_code_back])
  @@index([insurance_code])
  @@index([company_number])
}

model medicine_ingredient{
  id String @id @map("_id")
  code String
  state_code String
  state  String
  name String
  type String /// 식약처 분류명
  usage String // 투여
  amount String
  unit String
  @@index([name])
  @@index([type])
  @@index([usage])
}


model disease {
  id String @id @map("_id")
  kor_name String
  eng_name String
  code String
  complete_code_type String
  type String
  gender_type String?
  oriental_type String
  main_disease_type String?
  min_age Int?
  max_age Int?

  @@index([kor_name])
  @@index([eng_name])
  @@index([code])
  @@index([complete_code_type])
}


//--------------------------------------------------
// AUTH
//--------------------------------------------------
model user {
  id        String   @id @db.ObjectId @map("_id") @default(auto())
  email     String   @unique
  password  String
  nickname      String @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model refresh_token {
  id        String  @id @db.ObjectId @map("_id") @default(auto())
  user_id   String  
  token     String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([user_id])
  @@index([token])
  @@index([created_at])
}


model email_certification {
  id        String  @id @db.ObjectId @map("_id") @default(auto())
  email     String
  code      String
  type      CERTIFICATION_TYPE
  status    CERTIFICATION_STATUS @default(PENDING)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([email])
  @@index([email,code])
  @@index([status])
  @@index([created_at])
  @@index([status,created_at])
}

enum CERTIFICATION_TYPE {
  SIGN_UP
  FIND_PASSWORD
}

enum CERTIFICATION_STATUS {
  COMPLETE
  VERIFIED
  PENDING
  EXPIRED
}




model api_key {
  id        String  @id @db.ObjectId @map("_id") @default(auto())
  key       String   @unique
  name      String   
  user_id   String
  default_limit Int @default(1000) 
  status    STATUS @default(ACTIVE)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  api_key_monthly_usage api_key_monthly_usage[]
  api_key_usage_log api_key_usage_log[]
}

model api_key_monthly_usage {
  id       String  @id @db.ObjectId @map("_id") @default(auto())
  key   String
  year     Int
  month    Int
  usage    Int
  monthly_limit    Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt


  ///////////////////////////
  /// relation
  ///////////////////////////
  api_key api_key @relation(fields: [key], references: [key])


  @@unique([key,year,month])
  @@index([key])
  @@index([year,month])
}

model api_key_usage_log{
  id        String  @id @db.ObjectId @map("_id") @default(auto())
  key       String
  url       String 
  method    String
  date      DateTime 
  http_status    Int
  delay     Int


  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  ///////////////////////////
  /// relation
  ///////////////////////////
  api_key api_key @relation(fields: [key], references: [key])

  @@index([key])
  @@index([url])
  @@index([method])
  @@index([date])
  @@index([http_status])
  @@index([url,method])
}

enum STATUS {
  ACTIVE
  INACTIVE
  DELETED
}